using DevRegTest.domainAutomationScript.Report;
using DevRegTest.domainVMApp;
using Skyline.DataMiner.Net;
using Skyline.DataMiner.Net.Messages;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Management.Automation;
using System.Text;
using System.Threading;
using System.Windows;
using System.Xml;

namespace DevRegTest.domainAutomationScript.Scripts.Import
{
    class MakeEnvironment
    {
        //String with the directory path that you want to import all the scripts into you DMA 
        private string Dir { get; set; }

        public List<NameScriptsDirectories> scripts { get; set; }

        ExecuteScriptMessage ScriptMessage;
        ScriptProgressEventMessage scriptProgressEventMessageObject;
        Dictionary<DELTType, int> dictionaryOptions = new Dictionary<DELTType, int>();

        #region Constructor
        public MakeEnvironment(string DirArg, List<NameScriptsDirectories> scriptsArg)
        {
            Dir = DirArg;
            scripts = scriptsArg;
        }
        #endregion Constructor

        //Method that we use to import all the script from a directory
<<<<<<< HEAD
        public void Execute(RemotingConnection connectie, ListsScripts listsScriptArg)
=======
        public List<NameScriptsDirectories> Execute(RemotingConnection connectie, ListsScripts listsScriptArg, bool cmdOurUiArg)
>>>>>>> b93e0ee288f20a89917b0fdbfd98ab4e61186267
        {
            List<NameScriptsDirectories> xmlFiles = new List<NameScriptsDirectories>();
            List<NameScriptsDirectories> xmlCorrectedFiles = new List<NameScriptsDirectories>();

            foreach(string file in Directory.GetFiles(Dir, "*.xml", SearchOption.TopDirectoryOnly))
            {
                foreach (NameScriptsDirectories script in scripts)
                {
                    if (file == script.Path)
                    {
                        xmlFiles.Add(script);                        
                    }

                }
            }

            string[] DeltFiles = Directory.GetFiles(Dir, "*.dmimport", SearchOption.TopDirectoryOnly);
            string[] BatchFiles = Directory.GetFiles(Dir, "*.bat", SearchOption.TopDirectoryOnly);

            using (PowerShell PSI = PowerShell.Create())
            {
                PSI.AddScript("Set-ExecutionPolicy Unrestricted");
                PSI.Invoke();
                PSI.Commands.Clear();           
               
                foreach (string file in BatchFiles.Where(d => d.ToLower().EndsWith("start.bat") ||
                                                              d.ToLower().EndsWith("startpredelt.bat")))
                {
                    listsScriptArg.AddToListBatchFiles(Path.GetFileName(file));

                    PSI.AddScript("$action = New-ScheduledTaskAction -Execute '"+ file +"'");                   
                    PSI.AddScript("Register-ScheduledTask -Action $action  -TaskName \"AppLog\" -Description \"Daily dump of Applog\"");
                    PSI.Invoke();
                    PSI.Commands.Clear();
                    PSI.AddScript("Start-ScheduledTask -TaskPath \"\\\" -TaskName \"AppLog\"");
                    PSI.Invoke();                    

                    PSI.AddScript("$Global:AppLog=(Get-ScheduledTask -TaskName \"AppLog\").State");
                    PSI.Invoke();

                    var stateTask = PSI.Runspace.SessionStateProxy.PSVariable.GetValue("AppLog");
                    Console.WriteLine(PSI.Runspace.SessionStateProxy.PSVariable.GetValue("AppLog"));

                    while (stateTask.ToString().ToLower() != "ready")
                    {
                        ManualResetEventSlim wait = new ManualResetEventSlim(false);
                        wait.Wait(new TimeSpan(0, 0, 5));
                        PSI.Commands.Clear();
                        PSI.AddScript("$Global:AppLog=(Get-ScheduledTask -TaskName \"AppLog\").State");
                        PSI.Invoke();
                        stateTask = PSI.Runspace.SessionStateProxy.PSVariable.GetValue("AppLog"); 
                    }  

                    PSI.AddScript("Unregister-ScheduledTask -TaskName \"AppLog\" -Confirm:$false");
                    PSI.Invoke();
                }

                if (PSI.HadErrors)
                {
                    foreach (System.Management.Automation.ErrorRecord errorMessage in PSI.Streams.Error)
                    {
                        LoggingErrors.AddExceptionToList(DateTime.Now.ToString() + ": " + errorMessage.ToString() + ".");
                    }
                }
            }

            foreach (string file in DeltFiles)
            {
                listsScriptArg.AddToListDelts(Path.GetFileName(file));

                try
                {
                    connectie.OnNewMessage += HandleNewEventFromServer;
                    var filter = new SubscriptionFilter(typeof(ImportProgressEventMessage));
                    connectie.AddSubscription(filter);

                    ImportDelt(connectie, file);

                    ManualResetEventSlim wait = new ManualResetEventSlim(false);
                    wait.Wait(1000);

                    connectie.RemoveSubscription(filter);
                    //connectie.OnNewMessage -= HandleNewEventFromServer;
                }
                catch (Exception ex)
                {
                    LoggingErrors.AddExceptionToList(String.Format("{0}: {1} ({2})", DateTime.Now, "Error while importing Delts", ex.Message));
                }
            }

            foreach (NameScriptsDirectories file in xmlFiles)
            {
                try
                {
                    XmlDocument xml = new XmlDocument();
                    xml.Load(file.Path);
                    XmlNodeList ParametersNode = xml.FirstChild.SelectNodes("/DMSScript/Parameters");

                    if (!ParametersNode[0].HasChildNodes)
                    {
                        var contents = File.ReadAllLines(file.Path, Encoding.UTF8);

                        var cpfm = new CreateProtocolFileMessage() { Sa = new SA(new string[] { Path.GetFileNameWithoutExtension(file.Path) }), What = 2, strInfo = String.Join("\n", contents) };
                        var resp = connectie.HandleSingleResponseMessage(cpfm);
                        xmlCorrectedFiles.Add(file);                        
                    }
                }
                catch (Exception ex)
                {
<<<<<<< HEAD
                    LoggingErrors.AddExceptionToList(String.Format("{0}: {1} ({2})", DateTime.Now, "Error while loading script", ex.Message));
                }             
=======
                    LoggingErrors.AddExceptionToList(DateTime.Now.ToString() + " Error while loading script " + file.Path + Environment.NewLine + ex.ToString());
                }
              
>>>>>>> b93e0ee288f20a89917b0fdbfd98ab4e61186267
            }

            using (PowerShell PSI = PowerShell.Create())
            {
                PSI.AddScript("Set-ExecutionPolicy Unrestricted");
                PSI.Invoke();
                PSI.Commands.Clear();

                foreach (string file in BatchFiles.Where(d => d.ToLower().EndsWith("startpostdelt.bat")))
                {
                    listsScriptArg.AddToListBatchFiles(Path.GetFileName(file));

                    PSI.AddScript("$action = New-ScheduledTaskAction -Execute '" + file + "'");
                    PSI.AddScript("Register-ScheduledTask -Action $action  -TaskName \"AppLog\" -Description \"Daily dump of Applog\"");
                    PSI.Invoke();
                    PSI.Commands.Clear();
                    PSI.AddScript("Start-ScheduledTask -TaskPath \"\\\" -TaskName \"AppLog\"");
                    PSI.Invoke();

                    PSI.AddScript("$Global:AppLog=(Get-ScheduledTask -TaskName \"AppLog\").State");
                    PSI.Invoke();

                    var stateTask = PSI.Runspace.SessionStateProxy.PSVariable.GetValue("AppLog");
                    Console.WriteLine(PSI.Runspace.SessionStateProxy.PSVariable.GetValue("AppLog"));

                    while (stateTask.ToString().ToLower() != "ready")
                    {
                        ManualResetEventSlim wait = new ManualResetEventSlim(false);
                        wait.Wait(new TimeSpan(0, 0, 5));
                        PSI.Commands.Clear();
                        PSI.AddScript("$Global:AppLog=(Get-ScheduledTask -TaskName \"AppLog\").State");
                        PSI.Invoke();
                        stateTask = PSI.Runspace.SessionStateProxy.PSVariable.GetValue("AppLog");
                    }

                    PSI.AddScript("Unregister-ScheduledTask -TaskName \"AppLog\" -Confirm:$false");
                    PSI.Invoke();
                }

                if (PSI.HadErrors)
                {
                    foreach (System.Management.Automation.ErrorRecord errorMessage in PSI.Streams.Error)
                    {
                        LoggingErrors.AddExceptionToList(DateTime.Now.ToString() + ": " + errorMessage.ToString() + ".");
                    }
                }
            }

            return xmlCorrectedFiles;
        }

        public void ImportDelt(RemotingConnection connectie,string file)
        {
            if (!dictionaryOptions.ContainsKey(DELTType.DELT_ELEMENT))
                dictionaryOptions.Add(DELTType.DELT_ELEMENT, (Int32)(DELT_ELEMENT_OPTIONS.DELT_ELEMENT_DB_DATA | DELT_ELEMENT_OPTIONS.DELT_ELEMENT_DB_INFO));

            if(!dictionaryOptions.ContainsKey(DELTType.DELT_PROTOCOL))
                dictionaryOptions.Add(DELTType.DELT_PROTOCOL, (Int32)(DELT_PROTOCOL_OPTIONS.DELT_PROTOCOL_IMPORT_ALARM_TEMPLATE | DELT_PROTOCOL_OPTIONS.DELT_PROTOCOL_IMPORT_TRENDING_TEMPLATE | DELT_PROTOCOL_OPTIONS.DELT_PROTOCOL_INFORMATION_TEMPLATE));

            byte[] BytePathToPackage = File.ReadAllBytes(file);
            ImportRequestMessage importRequestMessage = new ImportRequestMessage(BytePathToPackage, dictionaryOptions, null, null);
            Guid importProgressIdentifier = importRequestMessage.GetProgressIdentifier();
            connectie.HandleSingleResponseMessage(importRequestMessage);

            ManualResetEvent waitHandle = new ManualResetEvent(false);

            lock (_importHandles)
            {
                _importHandles[importProgressIdentifier] = waitHandle;      
            }  

            waitHandle.WaitOne(60000);
            
            // cleanup wait handle
            lock (_importHandles)
            {
                _importHandles.Remove(importProgressIdentifier);
            }

            waitHandle.Dispose();
            waitHandle = null;
        }

        // called when server sends an event
        private void HandleNewEventFromServer(object sender, NewMessageEventArgs e)
        {       
             if (e.Message is ImportProgressEventMessage)
            {
                ImportProgressEventMessage progressEvent = (ImportProgressEventMessage)e.Message;

                switch (progressEvent.Type)
                {
                    case ImportProgressEventType.SUCCESS:
                        {
                            lock (_importHandles)
                            {
                                if (_importHandles.ContainsKey(progressEvent.GetProgressIdentifier()))
                                {
                                    // set the event so thet RunScript method stops waiting
                                    _importHandles[progressEvent.GetProgressIdentifier()].Set();
                                }                            
                            }
                            break;
                        }
                    case ImportProgressEventType.PROGRESS:
                        {
                            lock (_importHandles)
                            {
                                if (_importHandles.ContainsKey(progressEvent.GetProgressIdentifier()))
                                {
                                    // set the event so thet RunScript method stops waiting
                                    _importHandles[progressEvent.GetProgressIdentifier()].Set();
                                }
                            }
                            break;
                        }
                }
            }           
        }

        private Dictionary<Guid, ManualResetEvent> _importHandles = new Dictionary<Guid, ManualResetEvent>();
    }
}
